#verify username and password. If both are right, login; else return wrong msg

sig validAuth : (String, String) ~> (hasR:Bool,msg:String, name : String, uid : Int)
fun validAuth(name, pass) server{
  var db = database "calendar";
  var users = table "users" with (uid : Int, username: String, password: String, admin : Int) from db;

  var user_pwd = query{
    for(u <-- users)
      where(u.username==name && u.password==pass)
      [(uid=u.uid, username=u.username, admin= u.admin)]
  };
  if(user_pwd<>[]){
    (hasR=true, msg="Login Welcome",name=hd(user_pwd).username, uid=hd(user_pwd).uid)
  }
  else{
    var has_user = query{
      for(u <-- users)
        where(u.username==name)
        [(uid=u.uid, username=u.username, admin= u.admin)]
    };
    if(has_user<>[]){
      (hasR=false,msg="Wrong Password",name="", uid=0)
    }
    else{
      (hasR=false,msg="Unregistered Username", name="", uid=0)
    }
  }
}

#start page

fun mainPage (_) {
  var current_user = getCookie("loginname");
  if (current_user <> "")     # User is logged in! Return creds.
    login(current_user,"",true)
  else{
    page
    <#>{loginPage("")}</#>
  }
}

#login page
sig loginPage : (String) ~> (Xml)
fun loginPage(msg){
  <html>
      <head>
          <meta charset="utf-8" />
          <title>Login</title>
          <link rel="stylesheet" href="css/bootstrap.min.css" />
          <link rel="stylesheet" href="css/style.css" />
      </head>
      <body>
        <div class="container">
          <div class="login">
            <h2>Please Login</h2>
            <form l:action="{login(username,password,false)}" method="post">
              <div class="form-group has-error">
                <label class="control-label" for="inputerror">{stringToXml(msg)}</label>
              </div>
              <div class="form-group col-md-offset-4 col-sm-4">
                <input type="text" class="form-control" placeholder="Username" l:name="username" />
              </div>
              <div class="form-group col-md-offset-4 col-sm-4">
                <input type="password" class="form-control" placeholder="Password" l:name="password" />
              </div>
              <div class="form-group col-md-offset-4 col-sm-4">
                <button type="submit" class="btn btn-success btn-block">Login</button>
              </div>
            </form>
          </div>
        </div>
      </body>
  </html>
}

sig calendarPage : (String)~>(Xml)
fun calendarPage(user){
  <html>
    <head>
      <meta charset="utf-8" />
      <link rel="stylesheet" href="css/bootstrap.min.css" />
      <title>Calendar</title>
    </head>
    <body>
      <div class="container">
        <h1>Welcome!</h1>
        <h1>{stringToXml(user)}</h1>
        <a l:href="{logout()}">Logout</a>
      </div>
    </body>
  </html>
}

sig login : (String,String,Bool) ~> (Page)
fun login(usr,pwd,hasLogin) {
  if(hasLogin){
    page
    <#>{calendarPage(usr)}</#>
  }
  else{
    if(validAuth(usr,pwd).hasR){
      setCookie("loginname", usr);
      page
      <#>{calendarPage(usr)}</#>
    }
    else{
      page
      <#>{loginPage(validAuth(usr,pwd).msg)}</#>
    }
  }
}

sig logout : ()~>(Page)
fun logout(){
  setCookie("loginname", "");
  page
  <#>{loginPage("")}</#>
}

fun main () {
  addRoute("",mainPage);
  addStaticRoute("css", "css", []);
  servePages()
}

main()
