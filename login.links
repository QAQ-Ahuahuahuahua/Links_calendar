var current_u = "";

############################################
#Logic and data
############################################
var db = database "calendar";
var users = table "users" with (uid : Int, username: String, password: String, admin : Int) where uid readonly from db;
var groups = table "groups" with (gid : Int, group_name : String, creater : Int) where gid readonly from db;
var user_group = table "user_group" with (gid : Int, uid : Int, write : Int, read : Int, modify : Int, admin : Int)
                  where write default, modify default,read default,admin default from db;
var events = table "events" with (eid : Int, subject : String, description : String, creater : Int, group_event : Int, gid : Int)
                  where eid readonly, group_event default from db;
var occurrences = table "occurrences" with (oid : Int, eid :Int, start_date : String, start_time : String, end_date : String, end_time : String)
                  where oid readonly from db;
#############################################
#Login Part
#############################################
#verify username and password. If both are right, login; else return wrong msg

sig validAuth : (String, String) ~> (hasR:Bool,msg:String, name : String, uid : Int)
fun validAuth(name, pass) server{
  var user_pwd = query{
    for(u <-- users)
      where(u.username==name && u.password==pass)
      [(uid=u.uid, username=u.username)]
  };
  if(user_pwd<>[]){
    (hasR=true, msg="Login Welcome",name=hd(user_pwd).username, uid=hd(user_pwd).uid)
  }
  else{
    var has_user = query{
      for(u <-- users)
        where(u.username==name)
        [(uid=u.uid, username=u.username)]
    };
    if(has_user<>[]){
      (hasR=false,msg="Wrong Password",name="", uid=0)
    }
    else{
      (hasR=false,msg="Unregistered Username", name="", uid=0)
    }
  }
}

sig isAdmin: (String)~>(Bool)
fun isAdmin(user) server{
  var result = getUserByUsername(user);
  if(result.admin==1 && result.uid<>0 ){
    true
  }
  else{
    false
  }
}

sig getUserByUsername : (String)~>((uid: Int, username : String, admin : Int))
fun getUserByUsername(username) server{
  var user = query{
    for(u<--users)
    where(u.username==username)
    [(uid=u.uid, username=u.username, admin=u.admin)]
  };
  if(user<>[])
    hd(user)
  else
    (uid=0, username="", admin=0)
}

sig getUserById : (Int)~>((uid: Int, username : String, admin : Int))
fun getUserById(uid) server{
  var user = query{
    for(u<--users)
    where(u.uid==uid)
    [(uid=u.uid, username=u.username, admin=u.admin)]
  };
  if(user<>[])
    hd(user)
  else
    (uid=0, username="", admin=0)
}

sig logout : ()~>(Page)
fun logout(){
  setCookie("loginname", "");
  freshResource();
  login("")
}

#########################################
#Admin Group Page
#########################################
sig addGroup: (String)~>()
fun addGroup(group_name) {
  var username = getCookie("loginname");
  addGroup_S(group_name,username);
  groupPage()
}

sig updateGroup : (Int,String)~>()
fun updateGroup(gid, group_name){
  updateGroup_S(gid,group_name);
  groupPage()
}

sig deleteGroup : (Int)~>()
fun deleteGroup(gid){
  deleteGroup_S(gid);
  groupPage()
}

sig showGroupsByUser : ()~>[(gid : Int, name : String)]
fun showGroupsByUser() server{
  var user = getCookie("loginname");
  if(isAdmin(user)){
    query{
      for(g<--groups)
        [(gid=g.gid, name=g.group_name)]
    }
  }
  else{
    var uid = getUserByUsername(user).uid;
    query{
      for(g<--groups)
      for(ug<--user_group)
      where(ug.uid==uid && ug.gid==g.gid && ug.admin==1)
      [(gid=g.gid, name=g.group_name)]
    }
  }
}

sig getGroupById : (Int)~>((gid : Int, name : String, creater : Int))
fun getGroupById (gid) server{
  var group = query{
    for(g<--groups)
    where (g.gid==gid)
    [(gid=g.gid, name=g.group_name, creater= g.creater)]
  };
  if(group<>[])
    hd(group)
  else
    (gid=0, name="", creater=0)
}

sig addGroup_S : (String,String)~>()
fun addGroup_S (group_name,username) server {
  var uid = getUserByUsername(username).uid;
  insert groups values [(group_name=group_name,creater=uid)];
  var t = query{
    for(g<--groups)
    where(g.group_name==group_name && g.creater==uid)
    [(gid=g.gid)]
  };
  insert user_group values [(uid=uid,gid=hd(t).gid,write=1,read=1,modify=1,admin=1)]
}

sig updateGroup_S : (Int, String) ~>()
fun updateGroup_S (gid,group_name) server {
  update (g<--groups) where (g.gid==gid) set (group_name=group_name)
}

sig deleteGroup_S : (Int)~>()
fun deleteGroup_S (gid) server{
  delete (g<--groups) where (g.gid==gid);
  delete (ug<--user_group) where (ug.gid==gid)
}

#########################################
#Admin Group Page
#########################################
sig showUsers : ()~>[(uid : Int, username : String, admin : Int)]
fun showUsers() server{
  query{
    for(u<--users)
      [(uid=u.uid, username=u.username, admin=u.admin)]
  }
}

#sig deleteUser : (Int)~>()
fun deleteUser(uid){
  var current_u = getCookie("loginname");
  var c_uid = getUserByUsername(current_u).uid;
  deleteUser_S(uid);
  if(c_uid==uid){
    setCookie("loginname", "");
    replaceDocument(
    <html>
      <head>
        <meta charset="utf-8" />
        <link rel="stylesheet" href="css/bootstrap.min.css" />
        <title>Fool</title>
      </head>
      <body>
        <h1>Opps~!</h1>
        <h2>You have deleted yourself</h2>
      </body>
    </html>)
  }else{
    adminPage()
  }
  
}

sig deleteUser_S : (Int)~>()
fun deleteUser_S (uid) server{
  delete (u<--users) where (u.uid==uid);
  delete (ug<--user_group) where (ug.uid==uid)
}

sig addUser: (String,String,Int)~>()
fun addUser(username,password,admin) {
  addUser_S(username,password,admin);
  adminPage()
}

sig addUser_S : (String,String,Int)~>()
fun addUser_S (username,password,admin) server {
  insert users values [(username=username,password=password,admin=admin)]
}

sig updateAdmin : (Int,Int)~>()
fun updateAdmin (uid,admin){
  updateAdmin_S(uid,admin);
  adminPage()
}

sig updateAdmin_S : (Int,Int)~>()
fun updateAdmin_S (uid,admin) server{
  update (u<--users) where (u.uid==uid) set (admin=admin)
}

############################################
# User and Group Page
############################################
sig getRightByGid : (Int)~>(uid : Int,gid : Int, read : Int, write:Int,modify:Int,admin:Int)
fun getRightByGid (gid) server {
  var user = getCookie("loginname");
  var uid = getUserByUsername(user).uid;
  var r = query{
    for(ug<--user_group)
    where(ug.uid==uid && ug.gid==gid)
    [(uid=ug.uid,gid=ug.gid,read=ug.read,write=ug.write,admin=ug.admin,modify=ug.modify)]
  };
  if(r<>[])
    hd(r)
  else
    (uid=0,gid=0,read=0,write=0,admin=0,modify=0)
}

sig showGroupsByUid : (Int)~>([(gid : Int, name : String, read : Int, write:Int,modify:Int,admin:Int)])
fun showGroupsByUid(uid) server{
  query{
    for(g<--groups)
    for(ug<--user_group)
    where(ug.uid==uid && ug.gid==g.gid)
    [(gid=g.gid, name=g.group_name,read=ug.read,write=ug.write,modify=ug.modify,admin=ug.admin)]
  }
}

sig showUsersByGid : (Int)~>([(uid : Int, name : String, read : Int, write:Int,modify:Int,admin:Int)])
fun showUsersByGid(gid) server{
  query{
    for(u<--users)
    for(ug<--user_group)
    where(ug.uid==u.uid && ug.gid==gid)
    [(uid=u.uid, name=u.username,read=ug.read,write=ug.write,modify=ug.modify,admin=ug.admin)]
  }
}

sig showRestGroups : (Int)~>([(gid : Int, name : String)])
fun showRestGroups(uid) server {
  query{
    for(g<--groups)
    where(empty(for(ug<--user_group) where (ug.uid==uid && g.gid==ug.gid) [()]))
    [(gid=g.gid, name=g.group_name)]
  }
}

sig showRestUsers : (Int)~>([(uid : Int, name : String)])
fun showRestUsers (gid) server {
  query{
    for(u<--users)
    where(empty(for(ug<--user_group) where (ug.uid==u.uid && gid==ug.gid) [()]))
    [(uid=u.uid, name=u.username)]
  }
}

#sig addUserGroup : (Int, Int,Int,Int,Int,Int,String,String)~>()
fun addUserGroup(uid,gid,read,write,modify,admin,msg){
  addUserGroup_S(uid,gid,read,write,modify,admin);
  switch(msg){
    case "group" -> arrangeGroup(uid,getUserById(uid).username)
    case "user" -> arrangeUser(gid,getGroupById(gid).name)
  }
}

sig addUserGroup_S : (Int, Int,Int, Int,Int,Int)~>()
fun addUserGroup_S(uid,gid,read,write,modify,admin) server {
  insert user_group values [(uid=uid,gid=gid,read=read,write=write,modify=modify,admin=admin)]
}

sig updateUserP : (Int, Int,Int,Int,Int,Int,String)~>()
fun updateUserP(uid,gid,read,write,modify,admin,msg){
  updateUserP_S(uid,gid,read,write,modify,admin);
  switch(msg){
    case "group" -> arrangeGroup(uid,getUserById(uid).username)
    case "user" -> arrangeUser(gid,getGroupById(gid).name)
  }
}

sig updateUserP_S : (Int, Int,Int,Int,Int,Int)~>()
fun updateUserP_S (uid,gid,read,write,modify,admin) server {
  update (ug<--user_group) where (ug.uid==uid && ug.gid==gid) set (read=read,write=write,modify=modify,admin=admin)
}

sig deleteUserGroup : (Int,Int,String)~>()
fun deleteUserGroup(uid,gid,msg){
  deleteUserGroup_S(uid,gid);
  switch(msg){
    case "group" -> arrangeGroup(uid,getUserById(uid).username)
    case "user" -> arrangeUser(gid,getGroupById(gid).name)
  }
}

sig deleteUserGroup_S : (Int, Int)~>()
fun deleteUserGroup_S(uid,gid) server {
  delete (ug<--user_group) where (ug.uid==uid && ug.gid==gid)
}

############################################
#Add Event Page
############################################
sig hasWriteRight : ()~>(Bool)
fun hasWriteRight(){
  var user = getCookie("loginname");
  var t = showEventGroup();
  if(t<>[]||isAdmin(user))
    true
  else
    false
}

sig showEventGroup : ()~>[(gid : Int, name : String)]
fun showEventGroup() server{
  var user = getCookie("loginname");
  var uid = getUserByUsername(user).uid;
  query{
    for(g<--groups)
    for(ug<--user_group)
    where(ug.uid==uid && (ug.write==1 || ug.admin==1) && ug.gid==g.gid)
    [(gid=g.gid, name=g.group_name)]
  }
}

fun getEidByName(subject, gid) server {
  var t = query{
    for(e<--events)
    where(e.subject==subject && e.gid ==gid)
    [(eid = e.eid)]
  };
  if(t<>[])
    hd(t)
  else
    (eid=0)
}

sig addEvent : (String,String,String,String,String,String,String)~>()
fun addEvent(subject,description,startdate,starttime,enddate,endtime,gid) {
  var user = getCookie("loginname");
  var uid = getUserByUsername(user).uid;
  var l = addEvent_S(subject,description,startdate,starttime,enddate,endtime,gid,uid);
  dayPage(clientTime()/1000)
}

sig addEvent_S : (String,String,String,String,String,String,String,Int)~>()
fun addEvent_S(subject,description,startdate,starttime,enddate,endtime,gid,uid) server{
  var gid_i = stringToInt(gid);
  if(gid_i<>0){
    insert events values [(subject=subject,description=description,creater=uid,group_event=1,gid=gid_i)];
    var eid = getEidByName(subject,gid_i).eid;
    insert occurrences values [(eid=eid, start_date=startdate,start_time=starttime,end_date=enddate,end_time=endtime )]
  }
  else{
    insert events values [(subject=subject,description=description, creater=uid,group_event=0,gid=0)];
    var eid = getEidByName(subject,0).eid;
    insert occurrences values [(eid=eid, start_date=startdate,start_time=starttime,end_date=enddate,end_time=endtime)]
  }
}

sig showDayEvents : (String)~>[(eid :Int,subject:String,description:String)]
fun showDayEvents(date) server{
  var user = getCookie("loginname");
  var uid = getUserByUsername(user).uid;
  var person = query{
    for(o<--occurrences)
    for(e<--events)
    where(e.eid ==o.eid && o.start_date<=date &&  o.end_date>=date && e.creater==uid && e.group_event==0)
    [(eid=e.eid,subject=e.subject,description=e.description)]
  };
  var group = query{
    for(o<--occurrences)
    for(e<--events)
    where(e.eid ==o.eid && o.start_date<=date &&  o.end_date>=date && not(empty(for(ug<--user_group) where(ug.uid==uid && ug.gid==e.gid && (ug.read==1 || ug.admin==1 || ug.modify==1)) [()])) )
    [(eid=e.eid,subject=e.subject,description=e.description)]
  };
  person ++ group
}

fun getEventById(eid) server {
  var e = query{
    for(e<--events)
    where(e.eid==eid)
    [(eid=e.eid, subject=e.subject,description=e.description,creater=e.creater,gid=e.gid,group_event=e.group_event )]
  };
  if(e<>[])
    hd(e)
  else
    (eid=0,subject="",description="",creater=0,gid=0,group_event=0)

}

fun getOccurByEid(eid) server {
  query{
    for(o<--occurrences)
    where(o.eid==eid)
    [(oid=o.oid,start_d = o.start_date,start_t=o.start_time,end_d=o.end_date,end_t=o.end_time)]
  }
}

fun deleteEvent(eid){
  deleteEvent_S(eid);
  dayPage(clientTime()/1000)
}

fun deleteEvent_S(eid) server{
  delete (e<--events) where (e.eid==eid);
  delete (o<--occurrences) where (o.eid==eid)
}

fun deleteOccur(oid,eid){
  deleteOccur_S(oid);
  eachEvent(eid)
}

fun deleteOccur_S(oid) server {
  delete (o<--occurrences) where (o.oid==oid)
}

sig addOccur : (Int,String,String,String,String)~>()
fun addOccur(eid,start_d,start_t,end_d,end_t){
  addOccur_S(eid,start_d,start_t,end_d,end_t);
  eachEvent(eid)
}

sig addOccur_S : (Int,String,String,String,String)~>()
fun addOccur_S (eid, start_d,start_t,end_d,end_t) server{
  insert occurrences values [(eid=eid, start_time=start_t, start_date=start_d, end_date=end_d, end_time=end_t)]
}

sig updateOccur : (Int,Int,String,String,String,String)~>()
fun updateOccur (oid,eid,start_d,start_t,end_d,end_t){
  updateOccur_S(oid,eid,start_d,start_t,end_d,end_t);
  eachEvent(eid)
}

fun updateOccur_S (oid,eid,start_d,start_t,end_d,end_t) server {
  update (o<--occurrences) where (o.oid==oid && o.eid==eid) set (start_date=start_d,start_time=start_t,end_date=end_d,end_time=end_t)
}

sig updateEvent : (Int,String)~>()
fun updateEvent (eid,desc){
  updateEvent_S (eid,desc);
  eachEvent(eid)
}

fun updateEvent_S (eid,desc) server{
  update (e<--events) where (e.eid==eid) set (description=desc)
}

sig dayToWeek : (Int)~>(Int)
fun dayToWeek(date) {
  var day = intToDate(date);
  var c = day.year/100;
  var y = day.year `mod` 100;
  var m = day.month + 1;
  var d = day.day;
  if (m==1 || m==2) {
    var m = m+12;
    var y = y-1;
    var w = (y + y/4 + c/4 - 2*c + (26 * (m+1) /10) +d -1);
    if(w<0){
      ((w `mod` 7) + 7) `mod` 7
    }
    else{
      w `mod` 7
    }
  }
  else{
    var w = (y + y/4 + c/4 - 2*c + (26 * (m+1) /10) +d -1);
    if(w<0){
      ((w `mod` 7) + 7) `mod` 7
    }
    else{
      w `mod` 7
    }
  }
}

sig dayOfMonth : (Int,Int)~>(Int)
fun dayOfMonth(year,month){
  switch(month){
    case 0 -> 31
    case 1 ->{
      if((0==year `mod` 4)&&(0<> year `mod` 100)||(0==year `mod` 400))
        29
      else
        28
    }
    case 2 ->31
    case 3 ->30
    case 4 ->31
    case 5 ->30
    case 6 ->31
    case 7 ->31
    case 8 ->30
    case 9 ->31
    case 10 ->30
    case 11 ->31
  }
}

############################################
#Page
############################################
#start page

fun mainPage (_) {
  login("")
}

sig login : (String)~>(Page)
fun login(info){
  var current_user = getCookie("loginname");
  if (current_user <> "")     # User is logged in! Return creds.
    #login(current_user,"",true)
    calendarPage(current_user,serverTime())
  else{
    var (username=usr, password=pwd) = sendSuspend(fun(r){loginPage(info,r)});
    if(validAuth(usr,pwd).hasR){
      setCookie("loginname", usr);
      calendarPage(usr,serverTime())
    }
    else{
      login(validAuth(usr,pwd).msg)
    }
  }
}

#login page
sig loginPage : (String,Handler((username:String,password:String))) ~> (Page)
fun loginPage(msg,return){
  page
  <html>
      <head>
          <meta charset="utf-8" />
          <title>Login</title>
          <link rel="stylesheet" href="css/bootstrap.min.css" />
          <link rel="stylesheet" href="css/style.css" />
      </head>
      <body>
        <div class="container">
          <div class="login">
            <h2>Please Login</h2>
            <form l:action="{return((username=username,password=password))}" method="post">
              <div class="form-group has-error">
                <label class="control-label" for="inputerror">{stringToXml(msg)}</label>
              </div>
              <div class="form-group col-md-offset-4 col-sm-4">
                <input type="text" class="form-control" placeholder="Username" l:name="username" />
              </div>
              <div class="form-group col-md-offset-4 col-sm-4">
                <input type="password" class="form-control" placeholder="Password" l:name="password" />
              </div>
              <div class="form-group col-md-offset-4 col-sm-4">
                <button type="submit" class="btn btn-success btn-block">Login</button>
              </div>
            </form>
          </div>
        </div>
      </body>
  </html>
}

sig calendarPage : (String,Int)~>(Page)
fun calendarPage(user,date) {
  page
  <html>
    <head>
      <meta charset="utf-8" />
      <link rel="stylesheet" href="css/bootstrap.min.css" />
      <title>Calendar</title>
    </head>
    <body>
      <nav class="navbar navbar-default" role="navigation">
        <div class="container-fluid">
          <div class="narbar-header">
            <a href="" class="navbar-brand">Calendar</a>
          </div>
          <div>
            <ul class="nav navbar-nav navbar-left">
              <li><a href="">Home</a></li>
              <li><a href="" l:onclick="{eventPage()}">Add Event</a></li>
              {
                if(isAdmin(user)){
                  <li><a href="" l:onclick="{adminPage()}">User Admin</a></li>
                }
                else{
                  <#></#>
                }
              }
              <li><a href="" l:onclick="{groupPage()}">Group Admin</a></li>
              <li><a href="" l:onclick="{dayPage(clientTime()/1000)}">Day</a></li>
            </ul>
            <form class="navbar-form navbar-left" role="search" method="post">
              <div class="form-group">
                <input type="text" class="form-control" id="" placeholder="Search" />
              </div>
              <button type="submit" class="btn btn-default">Submit</button>
            </form>
            <ul class="nav navbar-nav navbar-right">
              <li><a l:href="{logout()}">Logout</a></li>
            </ul>
            <p class="navbar-text navbar-right">Welcome! {stringToXml(user)}</p>
          </div>
        </div>
      </nav>
      <#>{calendarPart(date)}</#>
    </body>
  </html>
}

fun calendarPart(date){
  var t = intToDate(date);
  var m = t.month;
  var y = t.year;
  var d = t.day;
  var firstDay = dateToInt((day=1,hours=0,minutes=0,month=m,seconds=0,year=y));
  var startWeek = dayToWeek(firstDay);
  var lastDay = dateToInt((day=0,hours=0,minutes=0,month=m+1,seconds=0,year=y));
  var days = intToDate(lastDay).day;
  var lastMonthDay = dateToInt((day=0,hours=0,minutes=0,month=m,seconds=0,year=y));
  var lmDays = intToDate(lastMonthDay).day;
  var lastMonth = dateToInt((day=d,hours=0,minutes=0,month=m-1,seconds=0,year=y));
  var nextMonth = dateToInt((day=d,hours=0,minutes=0,month=m+1,seconds=0,year=y));
  var rows = floatToInt(ceiling((intToFloat(days)+.intToFloat(startWeek))/.7.0));
  <div id="content" class="container">
    <div class="panel panel-default">
      <div class="panel-heading">
        <h3 class="panel-title">Calendar</h3>
      </div>
      <div class="panel-body">
        <div class="row">
          <div class="btn-group col-sm-offset-5">
            <button type="button" class="btn-info btn" l:onclick="{updateC(lastMonth)}" >Prev</button>
            <button type="button" class="btn-info btn" l:onclick="{updateC(date)}">{intToXml(y)} - {intToXml(m+1)}</button>
            <button type="button" class="btn-info btn" l:onclick="{updateC(nextMonth)}">Next</button>
          </div>
        </div>
        <table class="table table-striped">
          <colgroup>
            <col width="14%"/>
            <col width="14%"/>
            <col width="14%"/>
            <col width="14%"/>
            <col width="14%"/>
            <col width="14%"/>
            <col width="14%"/>
          </colgroup>
          <thead>
            <tr>
              <th>Sun</th>
              <th>Mon</th>
              <th>Tue</th>
              <th>Wed</th>
              <th>Thu</th>
              <th>Fri</th>
              <th>Sat</th>
            </tr>
          </thead>
          <tbody>
            {
              for(r<-[1..rows])
              <#>
              <tr>
                {
                  var start = ((r-1)*7-startWeek+1);
                  var end = (r*7-startWeek);
                  for(p<-[start..end]){
                    if(p<=days && p>0){
                      var time = intToString(y) ^^ "-" ^^ intToString(m+1) ^^ "-" ^^ intToString(p);
                      var events = showDayEvents(time);
                      if(p==d)
                      <td>
                        <div class="panel panel-danger">
                          <div class="panel-heading">
                            <h4 class="panel-title"><strong>{intToXml(p)}</strong></h4>
                          </div>
                          {
                            for(e<-events)
                            <a href="" class="list-group-item" l:onclick="{eachEvent(e.eid)}"><small>{stringToXml(e.subject)}</small></a>
                          }
                        </div>
                      </td>
                      else
                      <td>
                        <div class="panel panel-info">
                          <div class="panel-heading">
                            <h4 class="panel-title">{intToXml(p)}</h4>
                          </div>
                          {
                            for(e<-events)
                            <a href="" class="list-group-item" l:onclick="{eachEvent(e.eid)}"><small>{stringToXml(e.subject)}</small></a>
                          }
                        </div>
                      </td>
                    }
                    else{
                      if(p<=0){
                        var time = intToString(y) ^^ "-" ^^ intToString(m) ^^ "-" ^^ intToString(p+lmDays);
                        var events = showDayEvents(time);
                        <td>
                          <div class="panel panel-default">
                            <div class="panel-heading">
                              <h4 class="panel-title">{intToXml(p+lmDays)}</h4>
                            </div>
                            {
                              for(e<-events)
                              <a href="" class="list-group-item" l:onclick="{eachEvent(e.eid)}">
                                <small><p class="text-muted">{stringToXml(e.subject)}</p></small>
                              </a>
                            }
                          </div>
                        </td>
                      }
                      else{
                        var time = intToString(y) ^^ "-" ^^ intToString(m+2) ^^ "-" ^^ intToString(p-days);
                        var events = showDayEvents(time);
                        <td>
                          <div class="panel panel-default">
                            <div class="panel-heading">
                              <h4 class="panel-title">{intToXml(p-days)}</h4>
                            </div>
                            {
                              for(e<-events)
                              <a href="" class="list-group-item" l:onclick="{eachEvent(e.eid)}">
                                <small><p class="text-muted">{stringToXml(e.subject)}</p></small>
                              </a>
                            }
                          </div>
                        </td>
                      }
                    }
                  }
                }
              </tr>
              </#>
            }
          </tbody>
        </table>
      </div>
      <div class="panel-footer">

      </div>
    </div>
  </div>
}

fun updateC(date){
  replaceNode(calendarPart(date),getNodeById("content"))
}

sig dayPage :(Int)~>()
fun dayPage(date){
  var t = intToDate(date);
  var m = t.month;
  var y = t.year;
  var d = t.day;
  var today = intToString(y) ^^ "-" ^^ intToString(m+1) ^^ "-" ^^ intToString(d);
  var lastDay = dateToInt((day=d-1,hours=0,minutes=0,month=m,seconds=0,year=y));
  var nextDay = dateToInt((day=d+1,hours=0,minutes=0,month=m,seconds=0,year=y));
  replaceNode(
  <div class="container" id="content">
    <div class="list-group">
      <a href="" class="list-group-item">
        <div class="btn-group col-sm-offset-5">
          <button type="button" class="btn-primary btn" l:onclick="{dayPage(lastDay)}">Prev</button>
          <button type="button" class="btn-primary btn">Today {intToXml(y)} - {intToXml(m+1)} - {intToXml(d)}</button>
          <button type="button" class="btn-primary btn" l:onclick="{dayPage(nextDay)}">Next</button>
        </div>
      </a>
      {
        for(e<-showDayEvents(today))
        <a href="" class="list-group-item" l:onclick="{eachEvent(e.eid)}">
          <div class="row">
            <div class="col-sm-8">
              <h4 class="list-group-item-heading">{stringToXml(e.subject)}</h4>
            </div>
            <div class="col-sm-4">
              <a href="" l:onclick="{eachEvent(e.eid)}"><h4 class="pull-right">More</h4></a>
            </div>
          </div>
          <p class="list-group-item-text">{stringToXml(e.description)}</p>
        </a>
      }
    </div>
  </div>
  ,getNodeById("content"))
}

sig eachEvent : (Int)~>()
fun eachEvent(eid){
  var e = getEventById(eid);
  var occur = getOccurByEid(eid);
  var r = {if(e.group_event<>0)
              getRightByGid(e.gid)
            else
              (uid=0,gid=0,read=0,write=0,admin=0,modify=0)
            };
  replaceNode(
  <div class="container" id="content">
    <div class="row">
      <div class="col-sm-2">
        <h4>Suject</h4>
      </div>
      <div class="col-sm-10">
        <strong>{stringToXml(e.subject)}</strong>
      </div>
    </div>
    <div class="row" id="desc">
      <div class="col-sm-2">
        <h4>Description</h4>
      </div>
      <div class="col-sm-10">
        <p>{stringToXml(e.description)}</p>
      </div>
    </div>
    <div class="row">
      <div class="col-sm-2">
        <h4>Group Name</h4>
      </div>
      <div class="col-sm-10">
        {
          if(e.gid<>0)
            <p>{stringToXml(getGroupById(e.gid).name)}</p>
          else
            <p>None(Personal Business)</p>
        }
      </div>
    </div>
    <div class="row">
      <div class="col-sm-2">
        <h4>Created By</h4>
      </div>
      <div class="col-sm-10">
        <p>{stringToXml(getUserById(e.creater).username)}</p>
      </div>
    </div>
    <div class="row">
      <div class="col-sm-2">
        <h4>Occurrences</h4>
      </div>
    </div>
    {
      for(o<-occur)
      <div class="row" id="{intToString(o.oid)}">
        <div class="col-sm-2">
          <strong>Start</strong>
        </div>
        <div class="col-sm-2">
          <p>{stringToXml(o.start_d)} {stringToXml(o.start_t)}</p>
        </div>
        <div class="col-sm-2">
          <strong>End</strong>
        </div>
        <div class="col-sm-2">
          <p>{stringToXml(o.end_d)} {stringToXml(o.end_t)}</p>
        </div>
        <div class="col-sm-2">
          {
            if((r.gid<>0 && (r.modify ==1 || r.admin==1))||e.gid==0)
              <a href="" l:onclick="{editOccur(o.oid,eid,o.start_d,o.start_t,o.end_d,o.end_t)}"><strong>Edit</strong></a>
            else
              <#></#>
          }
        </div>
        <div class="col-sm-2">
          {
            if((r.gid<>0 && r.admin==1)||e.gid==0)
              <a href="" l:onclick="{deleteOccur(o.oid,eid)}"><strong>Delete</strong></a>
            else
              <#></#>
          }
        </div>
      </div>
    }
    <div id="new_occur"></div>
    <br />
    <br />
    <div class="btn-group">
      {
        if(r.gid==0){
          <#>
          <button type="button" class="btn btn-default" l:onclick="{editEvent(eid)}">Modify</button>
          <button type="button" class="btn btn-default" l:onclick="{deleteEvent(eid)}">Delete</button>
          <button type="button" class="btn btn-default" l:onclick="{newOccur(eid)}">Add Occurrences</button>
          </#>
        }
        else
          <#></#>
      }
      {
        if(r.gid<>0 && (r.modify ==1 || r.admin==1))
          <button type="button" class="btn btn-default" l:onclick="{editEvent(eid)}">Modify</button>
        else
          <#></#>
      }
      {
        if(r.gid<>0 && r.admin==1)
          <button type="button" class="btn btn-default" l:onclick="{deleteEvent(eid)}">Delete</button>
        else
          <#></#>
      }
      {
        if(r.gid<>0 && (r.write ==1 || r.admin==1))
          <button type="button" class="btn btn-default" l:onclick="{newOccur(eid)}">Add Occurrences</button>
        else
          <#></#>
      }
    </div>
  </div>
  ,getNodeById("content"))
}

fun editEvent(eid){
  replaceNode(
  <form  method="post" l:onsubmit="{updateEvent(eid,desc)}">
    <div class="row">
      <div class="col-sm-2">
        <h4>Description</h4>
      </div>
      <div class="col-sm-6">
        <textarea class="form-control" rows="5" l:name="desc"></textarea>
      </div>
    </div>
    <div class="row">
      <div class="pull-right btn-group col-sm-8">
        <button type="submit" class="btn btn-success">Submit</button>
        <button type="button" class="btn btn-warning" l:onclick="{eachEvent(eid)}">Cancle</button>
      </div>
    </div>
  </form>
  ,getNodeById("desc"))
}

sig newOccur : (Int)~>()
fun newOccur(eid){
  replaceNode(
  <form method="post" class="form-inline" l:onsubmit="{addOccur(eid,start_d,start_t,end_d,end_t)}">
    <div class="form-group">
      <label for="Start">Start Time</label>
      <input type="text" class="form-control" placeholder="2017-01-01" l:name="start_d" />
    </div>
    <div class="form-group">
      <label for="Time" class="sr-only"></label>
      <input type="text" class="form-control" placeholder="17:00" l:name="start_t"/>
    </div>
    <div class="form-group">
      <label for="End">End Time</label>
      <input type="text" class="form-control" placeholder="2017-01-01" l:name="end_d"/>
    </div>
    <div class="form-group">
      <label for="Time" class="sr-only"></label>
      <input type="text" class="form-control" placeholder="17:00" l:name="end_t"/>
    </div>
    <div class="btn-group">
      <button type="submit" class="btn btn-success" >Submit</button>
      <button type="button" class="btn btn-warning" l:onclick="{eachEvent(eid)}" >Cancle</button>
    </div>
  </form>
  ,getNodeById("new_occur"))
}

sig editOccur : (Int,Int,String,String,String,String)~>()
fun editOccur(oid,eid,s_date,s_time,e_date,e_time){
  var oid_s = intToString(oid);
  replaceNode(
  <form method="post" class="form-inline" l:onsubmit="{updateOccur(oid,eid,start_d,start_t,end_d,end_t)}">
    <div class="form-group">
      <label for="Start">Start Time</label>
      <input type="text" class="form-control" value="{s_date}" l:name="start_d" />
    </div>
    <div class="form-group">
      <label for="Time" class="sr-only"></label>
      <input type="text" class="form-control" value="{s_time}" l:name="start_t"/>
    </div>
    <div class="form-group">
      <label for="End">End Time</label>
      <input type="text" class="form-control" value="{e_date}" l:name="end_d"/>
    </div>
    <div class="form-group">
      <label for="Time" class="sr-only"></label>
      <input type="text" class="form-control" value="{e_time}" l:name="end_t"/>
    </div>
    <div class="btn-group">
      <button type="submit" class="btn btn-success" >Submit</button>
      <button type="button" class="btn btn-warning" l:onclick="{eachEvent(eid)}" >Cancle</button>
    </div>
  </form>
  ,getNodeById(oid_s))
}

sig groupPage : ()~>()
fun groupPage(){
  replaceNode(
  <div class="container" id="content">
    <div class="panel panel-default">
      <div class="panel-heading">
        <h3 class="panel-title">Group Admin</h3>
      </div>
      <div class="panel-body" id="group_ad">
        <table class="table table-hover">
          <thead>
            <tr>
              <th>Gid</th>
              <th>Group</th>
              <th></th>
              <th>Group Info</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            {
              for(group<-showGroupsByUser())
                <tr>
                  <td>{intToXml(group.gid)}</td>
                  <td id="{intToString(group.gid)}">{stringToXml(group.name)}</td>
                  <td><a href="" l:onclick="{editGroup(group.gid,group.name)}">Edit</a></td>
                  <td><a href="" l:onclick="{arrangeUser(group.gid,group.name)}">View</a></td>
                  <td><a href="" l:onclick="{deleteGroup(group.gid)}">Delete</a></td>
                </tr>
            }
          </tbody>
        </table>
        <div class="row" id="new_group">
          <div class="col-sm-offset-4 col-sm-4">
            <button type="button" class="btn btn-default btn-block" l:onclick="{newGroupDiv()}">Create Group</button>
          </div>
        </div>
      </div>
      <div class="panel-footer">

      </div>
    </div>
  </div>,
  getNodeById("content"))
}

sig eventPage : ()~>()
fun eventPage(){
  replaceNode(
  <div id="content" class="container">
    <div class="panel panel-default">
      <div class="panel-heading">
        <h3 class="panel-title">Add Event</h3>
      </div>
      <div class="panel-body">
        <form role="add_event" method="post" class="form-horizontal" l:onsubmit="{addEvent(subject,description,startdate,starttime,enddate,endtime,gid)}">
          <div class="form-group">
            <label for="Subject" class="col-sm-2 control-label">Subject</label>
            <div class="col-sm-8">
              <input type="text" class="form-control" l:name="subject" placeholder="Subject" />
            </div>
          </div>
          <div class="form-group">
            <label for="Description" class="col-sm-2 control-label">Description</label>
            <div class="col-sm-8">
              <textarea rows="5" cols="8" l:name="description" class="form-control" placeholder="Please add your details"></textarea>
            </div>
          </div>
          <div class="form-group">
            <label for="Start time" class="col-sm-2 control-label">Start time</label>
            <label for="Date" class="col-sm-1 control-label">Date</label>
            <div class="col-sm-3">
              <input type="text" class="form-control" l:name="startdate" placeholder="2016-01-01" />
            </div>
            <label for="Date" class="col-sm-1 control-label">Time</label>
            <div class="col-sm-3">
              <input type="text" class="form-control" l:name="starttime" placeholder="13:14" />
            </div>
          </div>
          <div class="form-group">
            <label for="End time" class="col-sm-2 control-label">End time</label>
            <label for="Date" class="col-sm-1 control-label">Date</label>
            <div class="col-sm-3">
              <input type="text" class="form-control" l:name="enddate" placeholder="2016-01-01" />
            </div>
            <label for="Date" class="col-sm-1 control-label">Time</label>
            <div class="col-sm-3">
              <input type="text" class="form-control" l:name="endtime" placeholder="13:14" />
            </div>
          </div>
          <div class="form-group">
            <label for="Groupname" class="col-sm-2 control-label ">Group Name</label>
            <div class="col-sm-3 col-sm-offset-1">
              <select class="form-control" l:name="gid" >
                <option value="0">None</option>
                {
                  for(g<-showEventGroup())
                  <option value="{intToString(g.gid)}">{stringToXml(g.name)}</option>
                }
              </select>
            </div>
          </div>
          <div class="col-sm-offset-4 col-sm-4">
            <button type="submit" class="btn btn-default btn-block">Submit</button>
          </div>
        </form>
      </div>
      <div class="panel-footer">

      </div>
    </div>
  </div>,
  getNodeById("content"))
}

sig adminPage : ()~>()
fun adminPage(){
  replaceNode(
  <div class="container" id="content">
    <div class="panel panel-default">
      <div class="panel-heading">
        <h3 class="panel-title">User Admin</h3>
      </div>
      <div class="panel-body" id="ad_sub">
        <table class="table table-hover">
          <thead>
            <tr>
              <th>Uid</th>
              <th>Username</th>
              <th>Group Info</th>
              <th>Admin</th>
              <th></th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            {
              for(user<-showUsers())
                <tr>
                  <td>{intToXml(user.uid)}</td>
                  <td>{stringToXml(user.username)}</td>
                  <td><a href="" l:onclick="{arrangeGroup(user.uid, user.username)}">View</a></td>
                  <td id= "{intToString(user.uid)}">{intToXml(user.admin)}</td>
                  <td><a href="" l:onclick="{editAdmin(user.uid)}">Edit</a></td>
                  <td><a href="" l:onclick="{deleteUser(user.uid)}">Delete</a></td>
                </tr>
            }
          </tbody>
        </table>
        <div class="row" id="new_user">
          <div class="col-sm-offset-4 col-sm-4">
            <button type="button" class="btn btn-default btn-block" l:onclick="{newUserDiv()}">Create User</button>
          </div>
        </div>
      </div>
      <div class="panel-footer">

      </div>
    </div>
  </div>,
  getNodeById("content"))
}

sig editAdmin : (Int)~>()
fun editAdmin(uid){
  var uid_s = intToString(uid);
  replaceNode(
  <td id="{uid_s}">
    <form method="post" l:onsubmit="{updateAdmin(uid,stringToInt(admin))}">
      <div class="input-group">
        <select class="form-control" l:name="admin">
          <option value="1">Yes</option>
          <option value="0">No</option>
        </select>
        <span class="input-group-btn">
          <button class="btn btn-default" type="submit">Submit</button>
        </span>
        <span class="input-group-btn">
          <button class="btn btn-default" type="button" l:onclick="{adminPage()}">Cancel</button>
        </span>
      </div>
    </form>
  </td>
  ,getNodeById(uid_s))
}

sig arrangeGroup : (Int,String)~>()
fun arrangeGroup(uid,username){
  replaceNode(
  <div class="panel-body" id="ad_sub">
    <table class="table table-hover">
      <caption class="center">The group permission for {stringToXml(username)}</caption>
      <thead>
        <tr>
          <th>Gid</th>
          <th>Name</th>
          <th>Read</th>
          <th>Write</th>
          <th>Modify</th>
          <th>Group Admin</th>
          <th>Action</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
      {
        var groups = showGroupsByUid(uid);
        if(groups<>[]){
          for(g<-groups)
          <tr id="{intToString(g.gid)}">
            <td>{intToXml(g.gid)}</td>
            <td>{stringToXml(g.name)}</td>
            <td>{intToXml(g.read)}</td>
            <td>{intToXml(g.write)}</td>
            <td>{intToXml(g.modify)}</td>
            <td>{intToXml(g.admin)}</td>
            <td><a href="" l:onclick="{editUserGroup(uid,username,g.gid,g.name,"group")}">Edit</a></td>
            <td><a href="" l:onclick="{deleteUserGroup(uid,g.gid,"group")}">Delete</a></td>
          </tr>
        }
        else
          <#></#>
      }
      </tbody>
    </table>
    <div class="row"></div>
    <div class="row">
      <div class="col-sm-offset-4 col-sm-4" id="changeBox">
        <h4 class="center">Arrange new group to {stringToXml(username)}</h4>
        <form  method="post" l:onsubmit="{addUserGroup(uid,stringToInt(gid),stringToInt(read),stringToInt(write),stringToInt(modify),stringToInt(admin),"group")}">
          <div class="form-group">
            <label for="Group">Group Name</label>
            <select class="form-control" l:name="gid">
              {
                for(g<-showRestGroups(uid))
                  <option value="{intToString(g.gid)}">{stringToXml(g.name)}</option>
              }

            </select>
          </div>
          <div class="form-group">
            <label for="Group">Read</label>
            <select class="form-control" l:name="read">
              <option value="1">Yes</option>
              <option value="0">No</option>
            </select>
          </div>
          <div class="form-group">
            <label for="Group">Write</label>
            <select class="form-control" l:name="write">
              <option value="1">Yes</option>
              <option value="0">No</option>
            </select>
          </div>
          <div class="form-group">
            <label for="Group">Modify</label>
            <select class="form-control" l:name="modify">
              <option value="1">Yes</option>
              <option value="0">No</option>
            </select>
          </div>
          <div class="form-group">
            <label for="Group">Admin</label>
            <select class="form-control" l:name="admin">
              <option value="1">Yes</option>
              <option value="0">No</option>
            </select>
          </div>
          <div class="pull-right">
            <button type="submit" class="btn btn-info">Submit</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  ,getNodeById("ad_sub"))
}

sig arrangeUser : (Int,String)~>()
fun arrangeUser(gid,name){
  replaceNode(
  <div class="panel-body" id="group_ad">
    <table class="table table-hover">
      <caption class="center">The user permission in group {stringToXml(name)}</caption>
      <thead>
        <tr>
          <th>Uid</th>
          <th>Name</th>
          <th>Read</th>
          <th>Write</th>
          <th>Modify</th>
          <th>Group Admin</th>
          <th>Action</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
      {
        var users = showUsersByGid(gid);
        if(users<>[]){
          for(u<-users)
          <tr id="{intToString(u.uid)}">
            <td>{intToXml(u.uid)}</td>
            <td>{stringToXml(u.name)}</td>
            <td>{intToXml(u.read)}</td>
            <td>{intToXml(u.write)}</td>
            <td>{intToXml(u.modify)}</td>
            <td>{intToXml(u.admin)}</td>
            <td><a href="" l:onclick="{editUserGroup(u.uid,u.name,gid,name,"user")}">Edit</a></td>
            <td><a href="" l:onclick="{deleteUserGroup(u.uid,gid,"user")}">Delete</a></td>
          </tr>
        }
        else
          <#></#>
      }
      </tbody>
    </table>
    <div class="row"></div>
    <div class="row">
      <div class="col-sm-offset-4 col-sm-4" id="changeBox">
        <h4 class="center">Arrange new user to {stringToXml(name)}</h4>
        <form  method="post" l:onsubmit="{addUserGroup(stringToInt(uid),gid,stringToInt(read),stringToInt(write),stringToInt(modify),stringToInt(admin),"user")}">
          <div class="form-group">
            <label for="User">Username</label>
            <select class="form-control" l:name="uid">
              {
                for(u<-showRestUsers(gid))
                  <option value="{intToString(u.uid)}">{stringToXml(u.name)}</option>
              }

            </select>
          </div>
          <div class="form-group">
            <label for="Group">Read</label>
            <select class="form-control" l:name="read">
              <option value="1">Yes</option>
              <option value="0">No</option>
            </select>
          </div>
          <div class="form-group">
            <label for="Group">Write</label>
            <select class="form-control" l:name="write">
              <option value="1">Yes</option>
              <option value="0">No</option>
            </select>
          </div>
          <div class="form-group">
            <label for="Group">Modify</label>
            <select class="form-control" l:name="modify">
              <option value="1">Yes</option>
              <option value="0">No</option>
            </select>
          </div>
          <div class="form-group">
            <label for="Group">Admin</label>
            <select class="form-control" l:name="admin">
              <option value="1">Yes</option>
              <option value="0">No</option>
            </select>
          </div>
          <div class="pull-right">
            <button type="submit" class="btn btn-info">Submit</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  ,getNodeById("group_ad"))
}

sig editUserGroup : (Int,String,Int,String,String)~>()
fun editUserGroup(uid,username,gid,gname,msg){
  var gid_s = intToString(gid);
  replaceNode(
  <div class="col-sm-offset-4 col-sm-4" id="changeBox">
    <h4 class="center">Update {stringToXml(username)} permission</h4>
    <form  method="post" l:onsubmit="{updateUserP(uid,gid,stringToInt(read),stringToInt(write),stringToInt(modify),stringToInt(admin),msg)}">
      <div class="form-group">
        <label for="Group">Group Name: {stringToXml(gname)}</label>
      </div>
      <div class="form-group">
        <label for="Group">Read</label>
        <select class="form-control" l:name="read">
          <option value="1">Yes</option>
          <option value="0">No</option>
        </select>
      </div>
      <div class="form-group">
        <label for="Group">Write</label>
        <select class="form-control" l:name="write">
          <option value="1">Yes</option>
          <option value="0">No</option>
        </select>
      </div>
      <div class="form-group">
        <label for="Group">Modify</label>
        <select class="form-control" l:name="modify">
          <option value="1">Yes</option>
          <option value="0">No</option>
        </select>
      </div>
      <div class="form-group">
        <label for="Group">Admin</label>
        <select class="form-control" l:name="admin">
          <option value="1">Yes</option>
          <option value="0">No</option>
        </select>
      </div>
      <div class="pull-right btn-group">
        <button type="submit" class="btn btn-info">Submit</button>
        <button type="button" class="btn btn-info" l:onclick="{arrangeGroup(uid,username)}">Cancle</button>
      </div>
    </form>
  </div>
  ,getNodeById("changeBox"))
}

sig editGroup : (Int,String)~>()
fun editGroup(gid,name){
  var gid_s = intToString(gid);
  replaceNode(
  <td id="{gid_s}">
    <form method="post" l:onsubmit="{updateGroup(gid,new_name)}">
      <div class="input-group col-sm-6">
        <input type="text" value="{name}" class="form-control" l:name="new_name" />
        <span class="input-group-btn">
          <button class="btn btn-default" type="submit">Done</button>
        </span>
        <span class="input-group-btn">
          <button class="btn btn-default" type="button" l:onclick="{groupPage()}">Cancel</button>
        </span>
      </div>
    </form>
  </td>
  ,getNodeById(gid_s))
}

sig newUserDiv : ()~>()
fun newUserDiv(){
  replaceNode(
  <div id="new_user">
    <form class="form-horizontal" role="addGroup" method="post" l:onsubmit="{addUser(username,password,stringToInt(admin))}">
      <div class="form-group">
        <label for="Username" class="col-sm-4 control-label">Username</label>
        <div class="col-sm-4">
          <input type="text" class="form-control" placeholder="Username" l:name="username" />
        </div>
      </div>
      <div class="form-group">
        <label for="Password" class="col-sm-4 control-label">Password</label>
        <div class="col-sm-4">
          <input type="password" class="form-control" placeholder="Password" l:name="password" />
        </div>
      </div>
      <div class="form-group">
        <label for="Admin" class="col-sm-4 control-label">Admin</label>
        <div class="col-sm-4">
          <select class="form-control" l:name="admin">
            <option value="1">Yes</option>
            <option value="0">No</option>
          </select>
        </div>
      </div>
      <div class="form-group">
        <div class="col-sm-offset-4">
          <div class="checkbox">
            <label><input type="checkbox" />Admin</label>
          </div>
        </div>
      </div>
      <div class="col-sm-offset-4 col-sm-4">
        <button type="submit" class="btn btn-default btn-block">Submit</button>
      </div>
    </form>
  </div>,
  getNodeById("new_user"))
}

sig newGroupDiv : ()~>()
fun newGroupDiv(){
  replaceNode(
  <div id="new_group">
    <form class="form-horizontal" role="addGroup" method="post" l:onsubmit="{addGroup(group_name)}">
      <div class="form-group">
        <label for="GroupName" class="col-sm-4 control-label">Group Name</label>
        <div class="col-sm-4">
          <input type="text" class="form-control" placeholder="Group name" l:name="group_name" />
        </div>
      </div>
      <div class="col-sm-offset-4 col-sm-4">
        <button type="submit" class="btn btn-default btn-block">Submit</button>
      </div>
    </form>
  </div>,
  getNodeById("new_group"))
}

fun main () {
  addRoute("",mainPage);
  addStaticRoute("css", "css", []);
  servePages()
}

main()
